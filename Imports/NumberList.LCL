
import Math;
import List;

set Sum
    case [], 0
    case [?x * ?xs], ?s then (Sum(?xs, ?partial) & Add(?x, ?partial, ?s)) $
                             (Add(?x, ?partial, ?s) & Sum(?xs, ?partial));

set Product
    case [], 1
    case [?x * ?xs], ?s then (Product(?xs, ?partial) & Mul(?x, ?partial, ?s)) $
                             (Mul(?x, ?partial, ?s) & Product(?xs, ?partial));

set Max
    case [?x], ?x
    case [?x * ?xs], ?max then Max(?xs, ?maxs) & (GT(?x, ?maxs) & E(?max, ?x))
                                               $ (E(?max, ?maxs));

set Min
    case [?x], ?x
    case [?x * ?xs], ?min then Min(?xs, ?mins) & (LT(?x, ?mins) & E(?min, ?x))
                                               $ (E(?min, ?mins));

set Range as recursive
    case ?x, ?x, [?x]
    case ?x, ?y, [?x*?xs] then LT(?x,?y) & Add(?x, 1, ?xp1) & Range(?xp1, ?y, ?xs);

set Partition
   case [], ?item, [], []
   case [?x * ?xs], ?item, [?x * ?left], ?right then LT(?x, ?item) & Partition(?xs, ?item, ?left, ?right)
   case [?x * ?xs], ?item, ?left, [?x * ?right] then GTE(?x, ?item) & Partition(?xs, ?item, ?left, ?right);

set Sort
   case [], []
   case [?x * ?xs], ?sorted then
      Partition(?xs, ?x, ?l, ?r) &
      Sort(?l, ?ls) &
      Sort(?r, ?rs) &
      Join(?ls, [?x * ?rs], ?sorted);

