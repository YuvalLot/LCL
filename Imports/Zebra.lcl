
import Types;

set E
    case ?e, ?e;

dataset Fixed;
set FindFixed
    case [], []
    case [?x * ?xs], ?vars then
        cond(
            Variable(?x) > E(?vars, [?x * ?vt]),
            True() > Fixed:Insert(?x) & E(?vars, ?vt)
        ) &
        FindFixed(?xs, ?vt);
set FromFixed
    case ?val, []
    case ?val, [?x * ?xs] then E(?x, ?val) & FromFixed(?val, ?xs);
set Repeat
    case ?xs then Fixed:Clear() & FindFixed(?xs, ?vs) & Fixed:Lookup(?val) & FromFixed(?val, ?vs);

set ToTheLeft
   case ?prop1, ?prop2, [?prop1 * ?rest1], [?c * ?list2] then In(?prop2, ?list2)
   case ?prop1, ?prop2, [?a * ?rest1], [?b * ?rest2] then ToTheLeft(?prop1, ?prop2, ?rest1, ?rest2);

set ExactlyLeft
   case ?prop1, ?prop2, [?prop1 * ?rest1], [?a * [?prop2 * ?b]]
   case ?prop1, ?prop2, [?a * ?list1], [?b * ?list2] then ExactlyLeft(?prop1, ?prop2, ?list1, ?list2);

set Align
   case ?prop1, ?prop2, [?prop1 * ?a], [?prop2 * ?b]
   case ?prop1, ?prop2, [?a * ?list1], [?b * ?list2] then Align(?prop1, ?prop2, ?list1, ?list2);

set NextTo
   case ?a, ?b, ?c, ?d then ExactlyLeft(?a, ?b, ?c, ?d) | ExactlyLeft(?b, ?a, ?d, ?c);
